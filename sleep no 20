	***** disk scheduling scan algo ******
	
#include<stdio.h>
#include<stdlib.h>
#defineMAX1000
int main()
{
int n,head,i,j,temp,total_movement = 0;
int queue[MAX],sequence[MAX];
printf("Enter thetotalnumberofdisk blocks: ");
scanf("%d",&n);
printf("Enter thedisk request string:\n");
for(i = 0;i < n; i++)
scanf("%d",&queue[i]);
printf("Enter thecurrent head position: ");
scanf("%d",&head);
printf("Enter thedirection (1 for right,0 forleft):");
int direction;
scanf("%d",&direction);
//sort therequest queue
for(i = 0;i < n - 1;i++)
{
for(j= i+1; j< n; j++)
{
if(queue[i] > queue[j]){
temp =queue[i];
queue[i] = queue[j];
queue[j] = temp;
}
}
}
//find the head position in the request queue
int start = 0;
for(i = 0;i < n; i++)
{
if (queue[i] >= head)
{
start = i;
break;
}
}
//ifdirection is right
if (direction == 1)
{
// add right end boundary
sequence[0] = n - 1;
for(i= 1,j= start; j< n; i++,j++)
{
sequence[i] =queue[j];
}
// add left end boundary
sequence[i] = 0;
for(j= start - 1; j>= 0; i++,j--)
{
sequence[i] =queue[j];
}
}
//ifdirection is left
else
{
// add left end boundary
sequence[0] = 0;
for(i= 1,j= start - 1; j>= 0;i++,j--)
{
sequence[i] =queue[j];
}
// add right end boundarysequence[i] = n - 1;
for(j= start;j< n; i++,j++)
{
sequence[i] =queue[j];
}
}
//print thesequenceand calculatethe total head movements
printf("Sequence: ");
for(i = 0;i <= n;i++)
{
printf("%d ",sequence[i]);
if (i >0)
{
total_movement += abs(sequence[i] - sequence[i - 1]);
}
}
printf("\nTotal head movements: %d\n",total_movement);
return0;
}




	******* MPI 1000 number ***
	
	

#include<mpi.h>
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#defineARRAY_SIZE1000
int main(int argc,char** argv){
int world_rank,world_size;
int array[ARRAY_SIZE];
int i,max;
//InitializeMPI environment
MPI_Init(&argc, &argv);
MPI_Comm_rank(MPI_COMM_WORLD,&world_rank);
MPI_Comm_size(MPI_COMM_WORLD,&world_size);
//Generaterandom arrayin root process (rank 0)
if (world_rank == 0) {
srand(time(NULL));printf("Generated Array: ");
for(i= 0; i< ARRAY_SIZE;i++) {
array[i] = rand() %100;
printf("%d ",array[i]);
}
printf("\n");
}
//Scatter thearraytoallprocesses
MPI_Scatter(array, ARRAY_SIZE / world_size, MPI_INT, array, ARRAY_SIZE / world_size, MPI_INT, 0,
MPI_COMM_WORLD);
//Find themaximumelement in each process
max= array[0];
for(i = 1;i < ARRAY_SIZE/ world_size; i++){
if (array[i] > max) {
max= array[i];
}
}
//Find themaximumelement across allprocesses using MPI_Reduce
int global_max;
MPI_Reduce(&max,&global_max,1,MPI_INT, MPI_MAX,0,MPI_COMM_WORLD);
//Print themaximum element in root process
if (world_rank == 0) {
printf("MaximumElement: %d\n",global_max);
}
//FinalizeMPI environment
MPI_Finalize();
return0;
}
