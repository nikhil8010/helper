	******** indexed file allo ******



#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#defineBLOCK_SIZE1024
int *disk;
int *free_blocks;
int *index_table;
int n_blocks;
void initialize_disk(int n) {
/*
* Initializes adisk with n numberof blocks and randomlymarks someblocks as allocated.
*/
int i;
disk = (int *) malloc(n *sizeof(int));
free_blocks = (int *)malloc(n* sizeof(int));
index_table = (int *) calloc(10,sizeof(int)); // Assumewehave10 files
n_blocks = n;
srand(time(NULL));
for(i = 0;i < n; i++){
if ((double) rand() /RAND_MAX < 0.5) {
disk[i] = 1;
} else{disk[i] = 0;
free_blocks[free_blocks[0] +1] = i;
free_blocks[0]++;
}
}
}
void show_bit_vector(){
/*
* Shows the bit vector for thedisk.
*/
int i,j;
printf("Bit Vector:\n");
for(i = 0;i < n_blocks; i+= 10) {
for(j= i;j < i+10; j++){
if(j>= n_blocks) {
break;
}
printf("%d ",disk[j]);
}
printf("\n");
}
}
void show_directory() {
/*
* Shows the directory forthedisk.
*/
int i,j;
printf("Directory:\n");
for(i = 0;i < 10; i++){
printf("%d:",i);
for(j= 0; j< index_table[i]; j++) {
printf("%d ",index_table[i *BLOCK_SIZE+j]);
}
printf("\n");
}
}
void delete_file(int file_index) {
/*
* Deletes afilefromthe disk bysetting its blocks tofree.
*/
int i,block_index;
for(i = 0;i < index_table[file_index];i++){block_index= index_table[file_index *BLOCK_SIZE+i];
disk[block_index] = 0;
free_blocks[free_blocks[0] +1] = block_index;
free_blocks[0]++;
}
index_table[file_index] = 0;
}
int main(){
int choice,file_index;
printf("Enter thenumberofblocks on thedisk: ");
scanf("%d",&n_blocks);
initialize_disk(n_blocks);
while (1) {
printf("\nMenu:\n");
printf("1. Show Bit Vector\n");
printf("2. Show Directory\n");
printf("3. Deletea File\n");
printf("4. Exit\n");
printf("Enteryourchoice:");
scanf("%d",&choice);
switch (choice) {
case 1:
show_bit_vector();
break;
case 2:
show_directory();
break;
case 3:
printf("Enterthe indexof thefiletodelete: ");
scanf("%d", &file_index);
delete_file(file_index);
printf("File%d deleted.\n", file_index);
break;
case 4:
return 0;
default:
printf("Invalid choice. Pleasetry again.\n");
break;
}
}
}



	***** Look Algo *****

	
#include<stdio.h>
#include<stdlib.h>
#defineDIRECTION_LEFT 0
#defineDIRECTION_RIGHT 1
int abs(int x) {
returnx >= 0 ?x :-x;
}
int compare(const void *a, const void *b) {
return*(int *) a- *(int *)b;
}
void print_request_order(int *request_order,int n){
/*
* Prints the orderin which thedisk requests areserved.
*/
int i;
printf("Order of requests served:");
for(i = 0;i < n; i++){
printf("%d ",request_order[i]);
}
printf("\n");
}
void print_head_movements(int head_movements){
/*
* Prints the total number of head movements.
*/
printf("Totalnumberofhead movements:%d\n",head_movements);
}
int main(){
int n_blocks,head_pos,direction, n_requests,i,j,k,head_movements = 0,min_request,max_request,
*requests, *request_order;
printf("Enter thetotalnumberofdisk blocks: ");
scanf("%d",&n_blocks);
printf("Enter thecurrent head position: ");scanf("%d",&head_pos);
printf("Enter thedisk request string (separated byspaces): ");
scanf("%d",&n_requests);
requests = (int *)malloc(n_requests *sizeof(int));
request_order = (int *) malloc(n_requests *sizeof(int));
for(i = 0;i < n_requests; i++) {
scanf("%d",&requests[i]);
}
printf("Enter thedirection (0 for left, 1 forright):");
scanf("%d",&direction);
qsort(requests,n_requests, sizeof(int),compare);
for(i = 0;i < n_requests; i++) {
if (requests[i] >= head_pos) {
break;
}
}
k = i;
if (direction == DIRECTION_LEFT){
min_request = 0;
max_request = k - 1;
for(i= k - 1; i>= 0;i--) {
request_order[max_request - i] = requests[i];
}
for(i= k;i < n_requests; i++) {
request_order[i] = requests[i];
}
}else{
min_request = k;
max_request = n_requests - 1;
for(i= k;i < n_requests; i++) {
request_order[i -k] = requests[i];
}
for(i= k - 1; i>= 0;i--) {
request_order[n_requests - 1 - i] = requests[i];
}
}
for(i = 0;i < n_requests; i++) {
head_movements +=abs(request_order[i] - head_pos);
head_pos = request_order[i];
}
print_request_order(request_order,n_requests);print_head_movements(head_movements);
return0;
}
