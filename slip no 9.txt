*********Resource Request Algo******
#include<stdio.h>
#include<stdlib.h>
intind,A[10][10],M[10][10],N[10][10],Av[10],Safe[10],Finish[10],nor,nop,work[10],req[10][10];
voidAcceptData(intX[][10])
{
inti,j;
for(i=0;i<nop;i++)
{
printf("P%d:\n"
,i);
for(j=0;j<nor;j++)
{
printf("%c:"
,65+j);
scanf("%d"
,&X[i][j]);
}
}
}
voidAcceptAvailability()
{
inti;
for(i=0;i<nor;i++)
{
printf("%c"
,65+i);
scanf("%d"
,&Av[i]);
work[i]=Av[i];
}
}
voidDisplayData()
{
inti,j;
printf("\n\tAllocation\t\tMax\t\tNeed\n");
printf("\t");
for(i=0;i<3;i++)
{
for(j=0;j<nor;j++)
printf("%4c"
,65+j);
printf("\t");
}
for(i=0;i<nop;i++)
{
printf("\nP%d\t"
,i);
for(j=0;j<nor;j++)
printf("%4d"
,A[i][j]);
printf("\t");
for(j=0;j<nor;j++)
printf("%4d"
,M[i][j]);
printf("\t");
for(j=0;j<nor;j++)
printf("%4d"
,N[i][j]);
}
printf("\nAvailable\n” );
for(j=0;j<nor;j++)
printf("%4d"
,work[j]);
}
voidCalcNeed()
{
inti,j;
for(i=0;i<nop;i++)
for(j=0;j<nor;j++)
N[i][j]=M[i][j]-A[i][j];
}
voidResource_Request(intno)
{
inti,f11=0,f12=0;
for(i=0;i<nor;i++)
{
if(req[no][i]<=N[no][i])
f11=1;
else
f11=0;
}
if(f11==0)
{
printf("\nError!Processhasexceededitsmaximumclaim");
exit(0);
}
if(f11==1)
{
for(i=0;i<nor;i++)
{
if(req[no][i]<=work[i])
f12=1;
else
f12=0;
}
if(f12==0)
{
printf("\nProcesshastowaitforresources");
exit(0);
}
}
if(f11==1&&f12==1)
{
for(i=0;i<nor;i++)
{
work[i]=work[i]-req[no][i];
A[no][i]=A[no][i]+req[no][i];
N[no][i]=N[no][i]-req[no][i];
}
}
}
intcheckNeed(intpno)
{
inti;
for(i=0;i<nor;i++)
if(N[pno][i]>work[i])
return(0);
return(1);
}
voidBanker()
{
inti=0,j=0,k=0,flag=0;
while(flag<2)
{
if(!Finish[i])
{
printf("\nNeed%d("
,i);
for(j=0;j<nor;j++)
printf("%d"
,N[i][j]);
if(!checkNeed(i))
{
printf("\b)>Work");
for(j=0;j<nor;j++)
printf("%d"
,work[j]);
printf("\b)");
printf("\nNeedCannotbesatisfied,considernextprocess");
}
else
{
printf("b)<=Work(");
for(j=0;j<nor;j++)
printf("%d,
"
,work[j]);
printf("\b)");
printf("\nNeedcanbesatisfied,soallocaterequiredresources");
printf("\nWork(%d)=
"
,i);
for(j=0;j<nor;j++)
{
work[j]+=A[i][j];
}
for(j=0;j<nor;j++)
printf("%4d"
,work[j]);
printf("\nAfterP%dterminatesitwillreleaseall itsresources\n"
,i);
Safe[k++]=i;
Finish[i]=1;
}
}
if((i+1)%nop==0)
flag++;
i=(i+1)%nop;
}
if(k==nop)
{
printf("\nSystemis insafestate...");
printf("\nSafeSequence:");
for(i=0;i<k;i++)
printf("P%d->"
,Safe[i]);
printf("\b\b");
}
else
{
printf("\nSystemis innotsafestate...");
}
}
intmain()
{
inti;
printf("\nEnternoofprocesses&NoofResources:");
scanf("%d%d"
,&nop,&nor);
printf("EnterAllocation\n");
AcceptData(A);
printf("EnterMaxRequirement\n");
AcceptData(M);
printf("EnterAvailability\n");
AcceptAvailability();
CalcNeed();
DisplayData();
Banker();
printf("\nEnterProcessnumberfromwhichrequestarrives:");
scanf("%d"
,&ind);
printf("\nEnterrequestforprocess%d\n"
,ind);
for(i=0;i<nor;i++)
{
printf("%c"
,65+i);
scanf("%d"
,&req[ind][i]);
}
for(i=0;i<nop;i++)
Finish[i]=0;
for(i=0;i<nor;i++)
work[i]=Av[i];
Resource_Request(ind);
Banker();
return(0);
}
    ********LOOK**********

#include <stdio.h> 
#include <stdlib.h> 
#define DIRECTION_LEFT 0 
#define DIRECTION_RIGHT 1 
int abs(int x) { 
 return x >= 0 ? x : -x; 
} 
int compare(const void *a, const void *b) { 
 return *(int *) a - *(int *) b; 
} 
void print_request_order(int *request_order, int n) { 
 /* 
 * Prints the order in which the disk requests are served. 
 */ 
 int i; 
 printf("Order of requests served: "); 
 for (i = 0; i < n; i++) { 
 printf("%d ", request_order[i]); 
 } 
 printf("\n"); 
} 
void print_head_movements(int head_movements) { 
 /* 
 * Prints the total number of head movements. 
 */ 
 printf("Total number of head movements: %d\n", head_movements); 
} 
int main() { 
 int n_blocks, head_pos, direction, n_requests, i, j, k, head_movements = 0, min_request, 
max_request, *requests, *request_order; 
 printf("Enter the total number of disk blocks: "); 
 scanf("%d", &n_blocks); 
 printf("Enter the current head position: "); 
 scanf("%d", &head_pos); 
 printf("Enter the disk request string (separated by spaces): "); 
 scanf("%d", &n_requests); 
 requests = (int *) malloc(n_requests * sizeof(int)); 
 request_order = (int *) malloc(n_requests * sizeof(int)); 
 for (i = 0; i < n_requests; i++) { 
 scanf("%d", &requests[i]); 
 } 
 printf("Enter the direction (0 for left, 1 for right): "); 
 scanf("%d", &direction); 
 qsort(requests, n_requests, sizeof(int), compare); 
 for (i = 0; i < n_requests; i++) { 
 if (requests[i] >= head_pos) { 
 break; 
 } 
 } 
 k = i; 
 if (direction == DIRECTION_LEFT) { 
 min_request = 0; 
 max_request = k - 1; 
 for (i = k - 1; i >= 0; i--) { 
 request_order[max_request - i] = requests[i]; 
 } 
 for (i = k; i < n_requests; i++) { 
 request_order[i] = requests[i]; 
 } 
 } else { 
 min_request = k; 
 max_request = n_requests - 1; 
 for (i = k; i < n_requests; i++) { 
 request_order[i - k] = requests[i]; 
 } 
 for (i = k - 1; i >= 0; i--) { 
 request_order[n_requests - 1 - i] = requests[i]; 
 } 
 } 
 for (i = 0; i < n_requests; i++) { 
 head_movements += abs(request_order[i] - head_pos); 
 head_pos = request_order[i]; 
 } 
 print_request_order(request_order, n_requests); 
 print_head_movements(head_movements); 
 return 0; 
} 

