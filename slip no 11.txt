*******Bankers Algoritham******
#include<stdio.h>
intA[10][10],M[10][10],N[10][10];
intAV[10],Safe[10],Finish[10],R[10][10],nor,nop;
voidAcceptData(intX[][10])
{
inti,j;
for(i=0;i<nop;i++)
{
printf("P%d\n"
,i);
for(j=0;j<nor;j++)
{
printf("%c:"
,65+j);scanf("%d"
,&X[i][j]);
}
}
}
voidAcceptAvailable()
{
inti;
for(i=0;i<nor;i++)
{
printf("%c:"
,65+i);
scanf("%d"
,&AV[i]);
}
}
voidAcceptRequest(intR[][10])
{
inti;
for(i=0;i<nor;i++)
{
printf("%c:"
,65+i);
scanf("%d"
,&R[i]);
}
}
voidDisplayData()
{
inti,j;printf("\n\tAllocation\t\tMax\t\tNeed\n");printf("\t");
for(i=0;i<3;i++)
{
for(j=0;j<nor;j++)
{
printf("%4c"
,65+j);
}
printf("\t");
}
for(i=0;i<nop;i++)
{
printf("\nP%d\t"
,i);
for(j=0;j<nor;j++)
{
printf("%4d"
,A[i][j]);
}
printf("\t");
for(j=0;j<nor;j++)
{
printf("%4d"
,M[i][j]);
}
printf("\t");
for(j=0;j<nor;j++)printf("%4d"
,N[i][j]);
}
printf("\nAvailable\n");for(j=0;j<nor;j++)
{
printf("%4d"
,AV[j]);
}
}
voidCalcNeed()
{
inti,j;
for(i=0;i<nop;i++)
{
for(j=0;j<nor;j++)
{
N[i][j]=M[i][j]-A[i][j];
}
}
}
intCheckNeed(intpno)
{
inti;
for(i=0;i<nor;i++)
{
if(N[pno][i]>AV[i])
{
return0;
}
}
return1;
}
intmain()
{
printf("\nEnterNumberofProcess:");scanf("%d"
,&nop);
printf("\nEnterNumberofResources:");scanf("%d"
,&nor);
printf("EnterAllocation\n");AcceptData(A);
printf("EnterMAXRequirement\n");AcceptData(M);
printf("EnterAvailability\n");AcceptAvailable();
CalcNeed();DisplayData();

******MPI******
#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#define ARRAY_SIZE 1000
int main(int argc, char *argv[]) {
int rank, size;
int i, min, max;
int data[ARRAY_SIZE];
int local_min, local_max;
MPI_Init(&argc, &argv);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
MPI_Comm_size(MPI_COMM_WORLD, &size);
// Generate random data on root process
if (rank == 0) {
printf("Generating random data...\n");
for (i = 0; i < ARRAY_SIZE; i++) {
data[i] = rand() % 100;
}
}
// Scatter data to all processes
MPI_Scatter(data, ARRAY_SIZE/size, MPI_INT, data, ARRAY_SIZE/size, MPI_INT, 0, MPI_COMM_WORLD);
// Calculate local min and max
local_min = data[0];
local_max = data[0];
for (i = 1; i < ARRAY_SIZE/size; i++) {
if (data[i] < local_min) {
local_min = data[i];
}
if (data[i] > local_max){
local_max = data[i];
}
}
// Reduce local min and max to get the final min and max
MPI_Reduce(&local_min, &min, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);
MPI_Reduce(&local_max, &max, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);
// Print the final min and max on root process
if (rank == 0) {
printf("The minimum number is: %d\n"
, min);
printf("The maximum number is: %d\n"
, max);
}
MPI_Finalize();
return 0;
