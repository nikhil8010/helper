	******* MPI 1000 number *******
	
	
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<mpi.h>
#defineARRAY_SIZE1000
int main(int argc,char** argv)
{
int rank,size;
int array[ARRAY_SIZE];
int i,sum =0,global_sum = 0;
//InitializeMPI
MPI_Init(&argc, &argv);
MPI_Comm_rank(MPI_COMM_WORLD,&rank);
MPI_Comm_size(MPI_COMM_WORLD,&size);
//Initializerandom numbergenerator
srand(time(NULL)+ rank);
//Fillarraywith randomnumbers
for(i = 0;i < ARRAY_SIZE; i++){
array[i] =rand()% 1000;
}
//Calculatelocal sumof odd numbers
for(i = 0;i < ARRAY_SIZE; i++){
if (array[i] % 2 != 0) {
sum += array[i];
}
}
//Reducesum across allprocesses
MPI_Reduce(&sum, &global_sum,1,MPI_INT,MPI_SUM,0,MPI_COMM_WORLD);
if (rank == 0) {
printf("The sumof all odd numbers in thearrayis:%d\n",global_sum);}
//FinalizeMPI
MPI_Finalize();
return0;
}




	******sequential file allo ********
	
	
	

#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
int *bitVector;
int totalBlocks;
void initializeBitVector(){
bitVector= (int*) malloc(totalBlocks *sizeof(int));
for(int i= 0;i < totalBlocks; i++){
bitVector[i] = rand()% 2;
}
}
void showBitVector() {
printf("Bit Vector:\n");
for(int i= 0;i < totalBlocks; i++){
printf("%d ",bitVector[i]);
}
printf("\n");
}
void deleteFile() {
int startBlock,fileSize;
printf("Enter starting block offiletobedeleted: ");scanf("%d",&startBlock);
printf("Enter filesize:");
scanf("%d",&fileSize);
if(startBlock < 0 ||startBlock >= totalBlocks ||startBlock +fileSize>totalBlocks){
printf("Invalid input\n");
return;
}
for(int i= startBlock; i< startBlock + fileSize; i++) {
if(bitVector[i] == 0){
printf("Error:Block %d is not allocated\n",i);
return;
}
}
for(int i= startBlock; i< startBlock + fileSize; i++) {
bitVector[i] = 0;
}
printf("File deleted successfully\n");
}
int main(){
printf("Enter total numberof blocks in disk:");
scanf("%d",&totalBlocks);
initializeBitVector();
while(true) {
printf("\nMenu:\n1. Show Bit Vector\n2. DeleteFile\n3. Exit\n");
int choice;
scanf("%d",&choice);
switch(choice) {
case 1:
showBitVector();
break;
case 2:
deleteFile();
break;
case 3:
printf("Exiting...\n");
return 0;
default:
printf("Invalid choice\n");
}}
}
