*******MPI**********
#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#define ARRAY_SIZE 1000
int main(int argc, char *argv[]) {
int rank, size;
int i, sum = 0;
int data[ARRAY_SIZE];
int local_sum = 0;
MPI_Init(&argc, &argv);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
MPI_Comm_size(MPI_COMM_WORLD, &size);
// Generate random data
if (rank == 0)
{
printf("Generating random data...\n");
for (i = 0; i < ARRAY_SIZE; i++)
{
data[i] = rand() % 100;
}
}
// Scatter data to all processes
MPI_Scatter(data, ARRAY_SIZE/size, MPI_INT, data, ARRAY_SIZE/size, MPI_INT, 0,
MPI_COMM_WORLD);
// Calculate local sum
for (i = 0; i < ARRAY_SIZE/size; i++)
{
local_sum += data[i];
}
// Reduce local sums to get the final sum
MPI_Reduce(&local_sum, &sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
// Print the final sum
if (rank == 0) {
printf("The sum is: %d\n"
, sum);
}
MPI_Finalize();
return 0;
}


*******C SCAN******


#include<stdio.h>
#include<stdlib.h>
int main()
{
intRQ[100],i,j,n,TotalHeadMoment=0,initial,size,move;
printf("EnterthenumberofRequests\n");
scanf("%d"
,&n);
printf("EntertheRequestssequence\n");
for(i=0;i<n;i++)
scanf("%d"
,&RQ[i]);
printf("Enterinitial head position\n");
scanf("%d"
,&initial);
printf("Entertotaldisksize\n");
scanf("%d"
,&size);
printf("Entertheheadmovementdirectionforhigh1 and forlow0\n");
scanf("%d"
,&move);
//logic forC-Scandiskscheduling
/*logic for sorttherequestarray*/
for(i=0;i<n;i++)
{
for(j=0;j<n-i-1;j++)
{
if(RQ[j]>RQ[j+1])
{
inttemp;
temp=RQ[j];
RQ[j]=RQ[j+1];
RQ[j+1]=temp;
}
}
}
intindex;
for(i=0;i<n;i++)
{
if(initial<RQ[i])
{
index=i;
break;
}
}
//ifmovementistowardshighvalue
if(move==1)
{
for(i=index;i<n;i++)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
initial=RQ[i];
}
// lastmovementformaxsize
TotalHeadMoment=TotalHeadMoment+abs(size-RQ[i-1]-1);
/*movementmaxtomindisk*/
TotalHeadMoment=TotalHeadMoment+abs(size-1-0);
initial=0;
for(i=0;i<index;i++)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
initial=RQ[i];
}
}
//ifmovementistowardslowvalue
else
{
for(i=index-1;i>=0;i--)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
initial=RQ[i];
}
// lastmovementforminsize
TotalHeadMoment=TotalHeadMoment+abs(RQ[i+1]-0);
/*movementmintomaxdisk*/
TotalHeadMoment=TotalHeadMoment+abs(size-1-0);
initial=size-1;
for(i=n-1;i>=index;i--)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
initial=RQ[i];
}
}
printf("Totalheadmovementis%d"
,TotalHeadMoment);
return0;
}